<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="4820b617-c8f5-469e-b4d2-457d27581e1e" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ProjectId" id="1P0XsnhwJm6lqivQu2S8lZX0uDR" />
  <component name="ReplState" timestamp="1565273137010">{:repl-history {:ide [], :local [{:command &quot;(map str/trim (rest (str/split \&quot;chai, -sugar\&quot; #\&quot;,\&quot;)))&quot;, :offset 51, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map (juxt str/trim #(subs % 0 1)) (rest (str/split \&quot;chai, -sugar\&quot; #\&quot;,\&quot;)))&quot;, :offset 32, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map (juxt inc dec) [1 2 3])&quot;, :offset 26, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;))&quot;, :offset 40, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest\n    (map str/trim))&quot;, :offset 66, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest\n    str/trim)&quot;, :offset 61, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest)&quot;, :offset 48, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest\n    type)&quot;, :offset 57, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest\n    #(map str/trim %))&quot;, :offset 69, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map str/trim [\&quot; mt\&quot; \&quot; dgfdgfdgfdg   \&quot;])&quot;, :offset 37, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt;&gt; \&quot;chai, -sugar\&quot;\n    #(str/split % #\&quot;,\&quot;)\n    rest\n    (map str/trim))&quot;, :offset 37, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest \n    (map str/trim %))&quot;, :offset 67, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest \n    (map str/trim))&quot;, :offset 67, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; \&quot;chai, -sugar\&quot;\n    (str/split #\&quot;,\&quot;)\n    rest \n    (map #(str/trim %)))&quot;, :offset 71, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; [1 2 3]\n    (map inc))&quot;, :offset 24, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3]\n    (map inc))&quot;, :offset 4, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3]\n    #(map inc %))&quot;, :offset 28, :ns &quot;beverage-factory.core&quot;} {:command &quot;(-&gt; [1 2 3]\n    (map inc ))&quot;, :offset 11} {:command &quot;(as-&gt; \&quot;chai, -sugar\&quot; i\n    (str/split i #\&quot;,\&quot;)\n   (rest i)\n    (map str/trim i))&quot;, :offset 57, :ns &quot;beverage-factory.core&quot;} {:command &quot;(as-&gt; \&quot;chai, -sugar\&quot; i\n    (str/split i #\&quot;,\&quot;)\n   (rest i)\n    (map str/trim i)\n      (map (juxt #(subs % 1) #(subs % 0 1))))&quot;, :offset 120, :ns &quot;beverage-factory.core&quot;} {:command &quot;(as-&gt; \&quot;chai, -sugar\&quot; i\n    (str/split i #\&quot;,\&quot;)\n   (rest i)\n    (map str/trim i)\n      (map (juxt #(subs % 1) #(subs % 0 1)) i))&quot;, :offset 124, :ns &quot;beverage-factory.core&quot;} {:command &quot;(def extract-ingredients [order-item]\n  (as-&gt; order-item o\n        (str/split o #\&quot;,\&quot;)\n        (rest o)\n        (map str/trim o)\n        (map (juxt #(subs % 1) #(subs % 0 1)) o)))&quot;, :offset 178, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn extract-ingredients [order-item]\n  (as-&gt; order-item o\n        (str/split o #\&quot;,\&quot;)\n        (rest o)\n        (map str/trim o)\n        (map (juxt #(subs % 1) #(subs % 0 1)) o)))&quot;, :offset 179, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn extract-ingredients [order-item]\n  (as-&gt; order-item o\n        (rest o)\n        (map str/trim o)\n        (map (juxt #(subs % 1) #(subs % 0 1)) o)))&quot;, :offset 152, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {:order order-items}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {:order order-items}))\n    (some #(inseparable-ingredients %) (map first order-items)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {:order order-items}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 602, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {:order order-items}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {}))\n    (some #(inseparable-ingredients %) (map first order-items)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 566, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {}))\n    (some #(inseparable-ingredients %) (map first order-items)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 548, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (threrow (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 550, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 548, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (println \&quot;menu-item \&quot; menu-item)\n  (println \&quot;ingredinets \&quot; ingredients)\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                                       {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                           {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 622, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -tea\&quot;)&quot;, :offset 26, :ns &quot;beverage-factory.core&quot;} {:command &quot;(into #{} [1 2 3])&quot;, :offset 16, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (println \&quot;menu-item \&quot; menu-item)\n  (println \&quot;ingredinets \&quot; ingredients)\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                            {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                                {}))\n    (= (get-in menu-items [(keyword menu-item) :ingredients]) (into #{} (map first ingredients))) (throw (ex-info \&quot;All the ingredients can't be excluded\&quot; {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 775, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -sugar, -water\&quot;)&quot;, :offset 36, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (println \&quot;menu-item \&quot; menu-item)\n  (println \&quot;ingredinets \&quot; ingredients)\n  (println (get-in menu-items [(keyword menu-item) :ingredients]))\n  (println (into #{} (map first ingredients)))\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items (keyword menu-item))) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                            {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                                {}))\n    (= (get-in menu-items [(keyword menu-item) :ingredients]) (into #{} (map first ingredients))) (throw (ex-info \&quot;All the ingredients can't be excluded\&quot; {}))\n    :else \&quot;Hi from else\&quot;)\n\n  )&quot;, :offset 889, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -sugar, -water, -milk, -tea\&quot;)&quot;, :offset 49, :ns &quot;beverage-factory.core&quot;} {:command &quot;= #{1 2 3} #{3 2 1})&quot;, :offset 18, :ns &quot;beverage-factory.core&quot;} {:command &quot;(= #{1 2 3} #{3 2 1})&quot;, :offset 1, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -sugar, -water, -milk\&quot;)&quot;, :offset 43, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items menu-item)) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                            {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                                {}))\n    (= (get-in menu-items [menu-item :ingredients]) (into #{} (map first ingredients))) (throw (ex-info \&quot;All the ingredients can't be excluded\&quot; {}))\n    :else \&quot;Hi from else\&quot;))&quot;, :offset 677, :ns &quot;beverage-factory.core&quot;} {:command &quot;(keyword \&quot;-\&quot;)&quot;, :offset 11, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map (map keyword %) [[1 2] [3 4]])&quot;, :offset 32, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map #(map keyword %) [[1 2] [3 4]])&quot;, :offset 6, :ns &quot;beverage-factory.core&quot;} {:command &quot;(keyword 1)&quot;, :offset 10, :ns &quot;beverage-factory.core&quot;} {:command &quot;(keyword \&quot;A\&quot;)&quot;, :offset 11, :ns &quot;beverage-factory.core&quot;} {:command &quot;(map #(map keyword %) [[\&quot;A\&quot; \&quot;B\&quot;] [\&quot;C\&quot; \&quot;D\&quot;]])&quot;, :offset 40, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn extract-ingredients [order-item]\n  (as-&gt; order-item o\n        (rest o)\n        (map str/trim o)\n        (map (juxt #(subs % 1) #(subs % 0 1)) o)\n        ))&quot;, :offset 161, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn extract-ingredients [order-item]\n  (as-&gt; order-item o\n        (rest o)\n        (map str/trim o)\n        (map (juxt #(subs % 1) #(subs % 0 1)) o)\n        (map #(map keyword %) o)))&quot;, :offset 185, :ns &quot;beverage-factory.core&quot;} {:command &quot;(extract-ingredients [\&quot;chai\&quot; \&quot;-sugar\&quot;])&quot;, :offset 36, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (println \&quot;menu-item\&quot; menu-item)\n  (println \&quot;integ\&quot; ingredients)\n  (cond\n    (empty? menu-item) (throw (ex-info \&quot;order cannot be empty\&quot; {}))\n    (nil? (menu-items menu-item)) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                            {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                                {}))\n    (= (get-in menu-items [menu-item :ingredients]) (into #{} (map first ingredients))) (throw (ex-info \&quot;All the ingredients can't be excluded\&quot; {}))\n    :else \&quot;Hi from else\&quot;))&quot;, :offset 743, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn calculate-price [menu-item ingredients]\n  (println \&quot;calculating price\&quot;)\n  (let [menu-item-cost (get-in menu-items [menu-item :price])]\n    (reduce (fn [cost ingredient]\n              ((operations (last ingredient)) cost (ingredients-price (first ingredient)))\n              ) menu-item-cost ingredients)))&quot;, :offset 311, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn validate-order [menu-item ingredients]\n  (println \&quot;menu-item\&quot; menu-item)\n  (println \&quot;integ\&quot; ingredients)\n  (cond\n    (nil? (menu-items menu-item)) (throw (ex-info \&quot;order should contain menu item at first place\&quot;\n                                                            {}))\n    (some #(inseparable-ingredients %) (map first ingredients)) (throw (ex-info \&quot;Invalid Order. Chief ingredients can't be excluded\&quot;\n                                                                                {}))\n    (= (get-in menu-items [menu-item :ingredients]) (into #{} (map first ingredients))) (throw (ex-info \&quot;All the ingredients can't be excluded\&quot; {}))\n    :else \&quot;Hi from else\&quot;))&quot;, :offset 675, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai,  -sugar\&quot;)&quot;, :offset 29, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai,  -sugar  ,  -water\&quot;)&quot;, :offset 40, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai,  -sugar  ,  -water , +milk\&quot;)&quot;, :offset 48, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai,  -sugar  , +milk\&quot;)&quot;, :offset 38, :ns &quot;beverage-factory.core&quot;} {:command &quot;#(place-order \&quot;chai\&quot;)&quot;, :offset 21, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -milk\&quot;)&quot;, :offset 27, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -milk, -water\&quot;)&quot;, :offset 35, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -milk, -water,  -tea\&quot;)&quot;, :offset 42, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -milk, -water,  -sugar\&quot;)&quot;, :offset 44, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order [\&quot;chai, -sugar\&quot;, \&quot;chai\&quot;, \&quot;coffee, -milk\&quot;])&quot;, :offset 55, :ns &quot;beverage-factory.core&quot;} {:command &quot;(str/lower-case \&quot;-sugar\&quot;)&quot;, :offset 25, :ns &quot;beverage-factory.core&quot;} {:command &quot;(str/lower-case \&quot;-Sugar\&quot;)&quot;, :offset 23, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;chai, -milk, -water,  +sugar\&quot;)&quot;, :offset 44, :ns &quot;beverage-factory.core&quot;} {:command &quot;(contains? [1 2 3] [1 2])&quot;, :offset 25, :ns &quot;beverage-factory.core&quot;} {:command &quot;(every? #{1 2 3} [1 2])&quot;, :offset 21, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn contain-non-customization-ingredient? [menu-item customization]\n  (println \&quot;menu-item\&quot; menu-item)\n  (println \&quot;customization \&quot; customization)\n  (-&gt; customization\n      (map first)\n      (into #{})\n      (get-in menu-items [menu-item :ingredients :main])))&quot;, :offset 260, :ns &quot;beverage-factory.core&quot;} {:command &quot;(\&quot;a\&quot; #{\&quot;a\&quot;})&quot;, :offset 9, :ns &quot;beverage-factory.core&quot;} {:command &quot;(#{\&quot;a\&quot;} \&quot;a\&quot;)&quot;, :offset 10, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn contain-non-customization-ingredient? [menu-item customization]\n  (println \&quot;menu-item\&quot; menu-item)\n  (println \&quot;customization \&quot; customization)\n  (-&gt;&gt; customization\n      (map first)\n      (into #{})\n      (#(% (get-in menu-items [menu-item :ingredients :main])))))&quot;, :offset 268, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn contain-invalid-customization? [menu-item customization]\n  (let [all-ingredients (get-in menu-items [menu-item :ingredients :optional])]\n    (not-every? all-ingredients (map first customization)))\n  )&quot;, :offset 206, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;Chai, -Milk, -water,  +Sugar\&quot;)&quot;, :offset 44, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;Chai, -Milk, -water,  +Sugar, -mint\&quot;)&quot;, :offset 51, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;Chai, -Milk, -water,  +Sugar, +mint\&quot;)&quot;, :offset 51, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn- refine-order [order]\n  (-&gt; order\n        (str/split  #\&quot;,\&quot;)\n        (#(map (str/lower-case %)))))&quot;, :offset 103, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn- refine-order [order]\n  (-&gt; order\n        (str/split  #\&quot;,\&quot;)\n        (#(map str/lower-case %))))&quot;, :offset 101, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn- extract-customization [order-item]\n  (-&gt;&gt; order-item \n      rest\n        (map str/trim)\n        (map (juxt #(subs % 1) #(subs % 0 1)))\n        (map #(map keyword %))))&quot;, :offset 174, :ns &quot;beverage-factory.core&quot;} {:command &quot;(refine-order \&quot;Chai , -sugar\&quot;)&quot;, :offset 28, :ns &quot;beverage-factory.core&quot;} {:command &quot;(extract-customization '(\&quot;chai \&quot; \&quot; -sugar\&quot;))&quot;, :offset 43, :ns &quot;beverage-factory.core&quot;} {:command &quot;run-all-tests)&quot;, :offset 13, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(place-order \&quot;chai\&quot;)&quot;, :offset 20, :ns &quot;beverage-factory.core&quot;} {:command &quot;(place-order \&quot;juice\&quot;)&quot;, :offset 21, :ns &quot;beverage-factory.core&quot;} {:command &quot;(deftest single-order-without-exclusions\n  ((is (= 4 (place-order \&quot;Chai\&quot;)))))&quot;, :offset 77, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(run-all-tests)&quot;, :offset 14, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(ns beverage-factory.core-test\n  (:require [clojure.test :refer :all]\n            [beverage-factory.core :refer :all]))&quot;, :offset 119, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(ns beverage-factory.core-test\n  (:require [clojure.test :refer :all]\n            [beverage-factory.core :refer [place-order]]))&quot;, :offset 128, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-without-customization\n  (testing \&quot; Test for single order without any customization\&quot;\n    (is (= 3 (place-order \&quot;Chai\&quot;)))))&quot;, :offset 143, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-with-customization\n  (testing \&quot; Test for single order with customization\&quot;\n    (is (= 3.5 (place-order \&quot;Chai  -sugar\&quot;)))))&quot;, :offset 143, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-with-customization\n  (testing \&quot; Test for single order with customization\&quot;\n    (is (= 3.5 (place-order \&quot;Chai, -sugar\&quot;)))))&quot;, :offset 143, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-without-customization\n  (testing \&quot; Test for single order without any customization\&quot;\n    (is (= 4 (place-order \&quot;Chai\&quot;)))))&quot;, :offset 143, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-with-invalid-customization\n  (testing \&quot;Test for single order with invalid customization\&quot;\n    (is (thrown? Exception (place-order \&quot;\&quot;)))))&quot;, :offset 158, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(deftest single-order-with-all-exclusions\n  (testing \&quot;Test for single order with customization containing all the exclusions\&quot;\n    (is (thrown? Exception (place-order \&quot;Chai,-milk,-sugar,-water\&quot;)))))&quot;, :offset 197, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(place-order [\&quot;Chai, -sugar\&quot; \&quot;Chai\&quot; \&quot;Coffee, -milk\&quot;])&quot;, :offset 53, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(type (place-order [\&quot;Chai, -sugar\&quot; \&quot;Chai\&quot; \&quot;Coffee, -milk\&quot;]))&quot;, :offset 6, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(into [] (place-order [\&quot;Chai, -sugar\&quot; \&quot;Chai\&quot; \&quot;Coffee, -milk\&quot;]))&quot;, :offset 7, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(run-tests)&quot;, :offset 10, :ns &quot;beverage-factory.core-test&quot;} {:command &quot;(defn- extract-customization [order-item]\n  \&quot;Return a list of the customization with the operation to be performed from order-item\n  e.g. (extract \&quot;chai, +sugar, -water\&quot;)\&quot; =&gt; [[sugar +] [water -]]\n  (-&gt;&gt; order-item\n      rest\n        (map str/trim)\n        (map (juxt #(subs % 1) #(subs % 0 1)))\n        (map #(map keyword %))))&quot;, :offset 328, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn- extract-customization\n  \&quot;Return a list of the customization with the operation to be performed from order-item\n  e.g. (extract \&quot;chai, +sugar, -water\&quot;)  =&gt; [[sugar +] [water -]]\&quot;\n  [order-item]\n  (-&gt;&gt; order-item\n      rest\n        (map str/trim)\n        (map (juxt #(subs % 1) #(subs % 0 1)))\n        (map #(map keyword %))))&quot;, :offset 331, :ns &quot;beverage-factory.core&quot;} {:command &quot;(defn- extract-customization\n  \&quot;Return a list of the customization with the operation to be performed from order-item\&quot;\n  [order-item]\n  (-&gt;&gt; order-item\n      rest\n        (map str/trim)\n        (map (juxt #(subs % 1) #(subs % 0 1)))\n        (map #(map keyword %))))&quot;, :offset 265, :ns &quot;beverage-factory.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="nRepl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="beverage-factory" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4820b617-c8f5-469e-b4d2-457d27581e1e" name="Default Changelist" comment="" />
      <created>1565012196266</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1565012196266</updated>
    </task>
    <servers />
  </component>
</project>